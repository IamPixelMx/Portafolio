{"version":3,"sources":["components/BottonNav.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","LabelBottomNavigation","classes","React","useState","value","setValue","BottomNavigation","onChange","event","newValue","className","BottomNavigationAction","label","icon","Home","App","exact","path","component","About","Projects","Experimental","Contact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8bAWMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OAII,SAASC,IACtB,IAAMC,EAAUL,IAD8B,EAEpBM,IAAMC,SAAS,WAFK,mBAEvCC,EAFuC,KAEhCC,EAFgC,KAQ9C,OACE,kBAACC,EAAA,EAAD,CAAkBF,MAAOA,EAAOG,SALb,SAACC,EAAOC,GAC3BJ,EAASI,IAI+CC,UAAWT,EAAQH,MACzE,kBAACa,EAAA,EAAD,CAAwBC,MAAM,SAASR,MAAM,SAASS,KAAM,kBAAC,IAAD,QAC5D,kBAACF,EAAA,EAAD,CAAwBC,MAAM,WAAWR,MAAM,WAAWS,KAAM,kBAAC,IAAD,QAChE,kBAACF,EAAA,EAAD,CAAwBC,MAAM,UAAUR,MAAM,UAAUS,KAAM,kBAAC,IAAD,QAC9D,kBAACF,EAAA,EAAD,CAAwBC,MAAM,YAAYR,MAAM,YAAYS,KAAM,kBAAC,IAAD,QAClE,kBAACF,EAAA,EAAD,CAAwBC,MAAM,QAAQR,MAAM,QAAQS,KAAM,kBAAC,IAAD,SC7BhE,IAaeC,EAbF,WACT,OACI,6BAASJ,UAAW,WAChB,yBAAKA,UAAW,IACZ,kBAAC,EAAD,S,0ECkBDK,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWC,MAChC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWE,MACnC,kBAAC,IAAD,CAAOH,KAAK,gBAAgBC,UAAWG,MACvC,kBAAC,IAAD,CAAOJ,KAAK,WAAWC,UAAWI,SCNtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ee40d125.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\n\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 500,\r\n  },\r\n});\r\n\r\nexport default function LabelBottomNavigation() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('recents');\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\r\n      <BottomNavigationAction label=\"GitHub\" value=\"github\" icon={<RestoreIcon />} />\r\n      <BottomNavigationAction label=\"LinkedIn\" value=\"linkedin\" icon={<FavoriteIcon />} />\r\n      <BottomNavigationAction label=\"Twitter\" value=\"twitter\" icon={<LocationOnIcon />} />\r\n      <BottomNavigationAction label=\"Proyectos\" value=\"proyectos\" icon={<FolderIcon />} />\r\n      <BottomNavigationAction label=\"Email\" value=\"email\" icon={<EmailIcon />} />\r\n    </BottomNavigation>\r\n  );\r\n}","import React from 'react';\r\nimport BottomNav from '../components/BottonNav'\r\nconst Home = () => {\r\n    return (\r\n        <section className={\"bg-soft\"}>\r\n            <div className={\"\"}>\r\n                <BottomNav/>\r\n\r\n\r\n\r\n            </div>    \r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Home from './views/Home';\nimport About from './views/About';\nimport Projects from './views/Projects';\nimport Experimental from './views/Experimental';\nimport Contact from './views/Contact';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route path='/about' component={About} />\n        <Route path='/projects' component={Projects} />\n        <Route path='/experimental' component={Experimental} />\n        <Route path='/contact' component={Contact} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}